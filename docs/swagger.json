{
    "swagger": "2.0",
    "info": {
        "description": "This is a sample task manager server.",
        "title": "Task Manager API",
        "contact": {
            "name": "API support",
            "url": "https://github.com/brionac626/taskManager",
            "email": "theone1632@gmail.com"
        },
        "license": {
            "name": "MIT",
            "url": "https://github.com/brionac626/taskManager/blob/main/LICENSE"
        },
        "version": "1.0"
    },
    "host": "localhost:8080",
    "paths": {
        "/tasks": {
            "get": {
                "description": "Get all tasks.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Tasks"
                ],
                "summary": "Get all tasks from the local storage.",
                "responses": {
                    "200": {
                        "description": "tasks retrieved successfully",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/definitions/models.Task"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Filed to get tasks",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "description": "crate new tasks.",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "Tasks"
                ],
                "summary": "Create new tasks from the client request.",
                "parameters": [
                    {
                        "description": "tasks to create",
                        "name": "req",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.CreateNewTasksRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "no content returned when successful"
                    },
                    "400": {
                        "description": "Invalid task fields values",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to create tasks",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/tasks/:id": {
            "put": {
                "description": "Update an existing task fields' values.",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "Tasks"
                ],
                "summary": "Update an existing task by task id.",
                "parameters": [
                    {
                        "type": "string",
                        "default": "\"9bsv0s2hf8ng030mva9g\"",
                        "example": "\"9bsv0s2hf8ng030mva9g\"",
                        "description": "target task id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "task fields to update",
                        "name": "req",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.UpdateTaskRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "no content returned when no changes"
                    },
                    "400": {
                        "description": "Invalid task fields values",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to update a task fields",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete an existing task.",
                "tags": [
                    "Tasks"
                ],
                "summary": "Delete an existing task by task id.",
                "parameters": [
                    {
                        "type": "string",
                        "default": "\"9bsv0s2hf8ng030mva9g\"",
                        "example": "\"9bsv0s2hf8ng030mva9g\"",
                        "description": "target task id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "no content returned when successful"
                    },
                    "500": {
                        "description": "Failed to update a task fields",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "models.CreateNewTasksRequest": {
            "type": "object",
            "properties": {
                "tasks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.NewTask"
                    }
                }
            }
        },
        "models.ErrorResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "models.NewTask": {
            "type": "object",
            "required": [
                "name",
                "status"
            ],
            "properties": {
                "name": {
                    "type": "string",
                    "example": "Task 1"
                },
                "status": {
                    "type": "integer",
                    "enum": [
                        0,
                        1
                    ],
                    "example": 1
                }
            }
        },
        "models.Task": {
            "type": "object",
            "properties": {
                "id": {
                    "description": "task id",
                    "type": "string",
                    "example": "9bsv0s2hf8ng030mva9g"
                },
                "name": {
                    "description": "task name",
                    "type": "string",
                    "example": "Task 1"
                },
                "status": {
                    "description": "0 represents an incomplete task, while 1 represents a completed task",
                    "type": "integer",
                    "enum": [
                        0,
                        1
                    ],
                    "example": 0
                }
            }
        },
        "models.UpdateTaskRequest": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                },
                "status": {
                    "type": "integer",
                    "enum": [
                        0,
                        1
                    ]
                }
            }
        }
    }
}